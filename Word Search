# Given an m x n grid of characters board and a string word, return true if word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

# Example : Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED" -> Output: true

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        self.res = False
        for i in range(len(board)):
            for j in range(len(board[0])):
                self.helper(board, i, j, word)
                if self.res:
                    return self.res
        return self.res

    def helper(self, board, i, j, word):
        if self.res:
            return
        if len(word) == 0:
            self.res = True
            return
        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:
            return
        tmp = board[i][j]
        board[i][j] = "#"
        for (r, c) in [(i-1,j), (i+1,j), (i,j-1), (i,j+1)]:
            self.helper(board, r, c, word[1:])
            
        board[i][j] = tmp
